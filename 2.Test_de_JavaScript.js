/*
¬°Es hora de poner a prueba cu√°nto sabes sobre JavaScript!

Esta lectura es una prueba de JavaScript. A diferencia de un examen, nadie te obligar√° a nada. Puedes hacer trampa y saltar a la siguiente clase, ese es el camino f√°cil. Pero tengo mucha fe en ti, conf√≠o en que seguir√°s mis consejos y no avanzar√°s a la siguiente clase hasta superar esta prueba.

Instrucciones para tomar esta prueba
Eval√∫a muy cr√≠ticamente tu conocimiento.
Si logras resolver la prueba, no importa cu√°nto te cueste, puedo asegurarte que tienes todo para continuar a las siguientes clases y tomar el resto del curso.
Si no lo logras, no te preocupes, absolutamente nadie puede juzgarte, solo t√∫. Vuelve al Curso B√°sico de JavaScript, anota los temas clave donde puedes mejorar, ubica las clases donde puedes aprenderlos y estudia vigorosamente.
Es completamente v√°lido hacer b√∫squedas en Google, cursos y tutoriales de Platzi, incluso usar tu cuaderno de notas sin importar si es f√≠sico o virtual.
Recuerda que el √©xito no se mide por cu√°nto tiempo te toma aprender, esa m√©trica es relativamente in√∫til. Mejor conc√©ntrate en completar los cursos de tu ruta de aprendizaje profesional y desarrollar los proyectos que realmente demuestran que dominas cada tecnolog√≠a.

¬°Mucha suerte!
*/

/*
Variables y operaciones
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es una variable y para qu√© sirve?
Una variables es una representaci√≥n de un espacio que sera reservado en memoria para almacenar informaci√≥n

¬øCu√°l es la diferencia entre declarar e inicializar una variable?
La diferencia es que al declarar, le decimos al sistema que reserve un espacio en memoria y en algun momento sera utilizado. Por otro lado inicializar es almacenar algun tipo de informaci√≥n en un espacio de memoria

¬øCu√°l es la diferencia entre sumar n√∫meros y concatenar strings?
Podriamos decir que la principal diferencia radica en el resultado, ya que, por ejemplo, si sumamos 1 + 4, el resultado sera 5, por otro lado si concatenamos "1" y "4" el resultado sera "14"

¬øCu√°l operador me permite sumar o concatenar?
El operador que nos permite sumar o concatenar es el +
*/

/*
2Ô∏è‚É£ Determina el nombre y tipo de dato para almacenar en variables la siguiente informaci√≥n:

Nombre - tipo String - Ejemplo: "Luis"
Apellido - tipo String - Ejemplo: "Mendoza"

Nombre de usuario en Platzi - tipo String - Ejemplo: "Mr_Men09"

Edad - tipo Number - Ejemplo: 21

Correo electr√≥nico - tipo String - Ejemplo: "lemt.09@gmail.com"

Mayor de edad - tipo boolean - Ejemplo: true

Dinero ahorrado - tipo Number - Ejemplo: 160000

Deudas - tipo Number - Ejemplo: 330000
*/

/*
3Ô∏è‚É£ Traduce a c√≥digo JavaScript las variables del ejemplo anterior y deja tu c√≥digo en los comentarios.
*/
var nombre = "Luis"
var apellido = "Mendoza"
var usuario = "Mr_Men09"
var edad = 21
var email = "lemt.09@gmail.com"
var mayor = true
var ahorrado = 160000
var deudas = 330000


/*
4Ô∏è‚É£ Calcula e imprime las siguientes variables a partir de las variables del ejemplo anterior:
Nombre completo (nombre y apellido)
Dinero real (dinero ahorrado menos deudas)
*/
var nomCompleto = nombre + apellido
var dineroReal = ahorrado - deudas

/*
Funciones
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es una funci√≥n?
Una funci√≥n es una forma de ahorrar codigo. Se utiliza cuando una acci√≥n se lleva a cabo de forma reiterada.

¬øCu√°ndo me sirve usar una funci√≥n en mi c√≥digo?
Precisamente es util cuando necesito usar una misma acci√≥n varias veces. Por ejemplo registrar a un usuario

¬øCu√°l es la diferencia entre par√°metros y argumentos de una funci√≥n?
Un parametro es una variable declarada que recibira la funci√≥n 
Un argumento es una variable la cual recibira la funcion en tiempo de ejecuci√≥n, es decir, cuando se inicializara la variable
*/

/*
2Ô∏è‚É£ Convierte el siguiente c√≥digo en una funci√≥n, pero, cambiando cuando sea necesario las variables constantes por par√°metros y argumentos en una funci√≥n:
const name = "Juan David";
const lastname = "Castro Gallego";
const completeName = name + lastname;
const nickname = "juandc";

console.log("Mi nombre es " + completeName + ", pero prefiero que me digas " + nickname + ".");
*/

function presentacion(name, lastname, nickname)
{
    console.log(`Mi nombre es ${name} ${lastname}, pero prefiero que me digas ${nickname}`)
}

/*
Condicionales
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es un condicional?
Un condicional es una sentencia de control que nos permitira ejecutar una parte u otra del codigo evaluando precisamente una condicion

¬øQu√© tipos de condicionales existen en JavaScript y cu√°les son sus diferencias?
En javascript tenemos los condicionales if, else if, else y switch
la diferencia es que, if evalua una condici√≥n y si es verdadera, ejecuta el codigo. El if else evaluara otra condicion si la condicion del if fue falsa. El else se ejecutara si las condiciones if o if else fallan. Finalmente el switch evalua una serie de eventos determinados, se utiliza sobre todo para menus

¬øPuedo combinar funciones y condicionales?
Si, se pueden combinar
*/

/*
2Ô∏è‚É£ Replica el comportamiento del siguiente c√≥digo que usa la sentencia switch utilizando if, else y else if:
const tipoDeSuscripcion = "Basic";

switch (tipoDeSuscripcion) {
   case "Free":
       console.log("Solo puedes tomar los cursos gratis");
       break;
   case "Basic":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
       break;
   case "Expert":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
       break;
   case "ExpertPlus":
       console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
       break;
}
*/

const tipoDeSuscripcion = "Basic";

if(tipoDeSuscripcion == "Free")
{
    console.log("Solo puedes tomar los cursos gratis");
}
else if(tipoDeSuscripcion == "Basic")
{
    console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");    
}
else if(tipoDeSuscripcion == "Expert")
{
    console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");    
}
else if(tipoDeSuscripcion == "ExpertPlus")
{
    console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");    
}

/*
3Ô∏è‚É£ Replica el comportamiento de tu condicional anterior con if, else y else if, pero ahora solo con if (sin else ni else if).
üí° Bonus: si ya eres una experta o experto en el lenguaje, te desaf√≠o a comentar c√≥mo replicar este comportamiento con arrays u objetos y un solo condicional. üòè
*/

var tipoDeSuscripcionArray = [{sus: "Free", mess: "Solo puedes tomar los cursos gratis"}, {sus:"Basic", mess: "Puedes tomar casi todos los cursos de Platzi durante un mes"}, {sus: "Expert", mess: "Puedes tomar casi todos los cursos de Platzi durante un a√±o"}, {sus: "ExpertPlus", mess: "T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o"}];

var actual = "Basic"

var mensaje = tipoDeSuscripcionArray.find(function(suscripcion)
{
    if(suscripcion.sus == actual)
    {
        console.log(suscripcion.mess);
    }
})


/*
Ciclos
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es un ciclo?
un ciclo es un recurso que ejecutara el codigo en su interior tantas veces se lo indiquemos

¬øQu√© tipos de ciclos existen en JavaScript?
En JavaScript tenemos For y While

¬øQu√© es un ciclo infinito y por qu√© es un problema?
un ciclo infinito es cuando un ciclo no consigue la condicion para terminar, el mas comun es, por ejemplo, while(true). Es un problema debido a que al nunca terminar, llegara un punto en que acapara todos los recursos del equipo que lo ejecuta y adem√°s nunca consigue el objetivo

¬øPuedo mezclar ciclos y condicionales?
Si, es posible
*/

/*
2Ô∏è‚É£ Replica el comportamiento de los siguientes ciclos for utilizando ciclos while:
for (let i = 0; i < 5; i++) {
    console.log("El valor de i es: " + i);
}

for (let i = 10; i >= 2; i--) {
    console.log("El valor de i es: " + i);
}
*/
var i = 0
while(i<5)
{
    console.log(`El valor de i es ${i}`);
    i++;
}
i = 10
while(i>=2)
{
    console.log(`El valor de i es: ${i}`);
    i--;
}


/*
3Ô∏è‚É£ Escribe un c√≥digo en JavaScript que le pregunte a los usuarios cu√°nto es 2 + 2. Si responden bien, mostramos un mensaje de felicitaciones, pero si responden mal, volvemos a empezar.
üí° Pista: puedes usar la funci√≥n prompt de JavaScript.
*/
var respuesta = prompt("¬øCuanto es 2 + 2?");
if(respuesta == 4)
{
    console.log("Felicitaciones, es correcto")
}
else
{
    console.log("Es incorrecto")
}

/*
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es un array?
Un array es una estructura de datos de tipo objeto que nos permite almacenar diferentes datos en el

¬øQu√© es un objeto?
un objeto es un ente independiente que tiene propiedades y tipos

¬øCu√°ndo es mejor usar objetos o arrays?
depende de la situaci√≥n, no hay uno mejor que otro, sino uno mas adecuado a la situaci√≥n que otro

¬øPuedo mezclar arrays con objetos o incluso objetos con arrays?
Si, es posible
*/

/*
2Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima su primer elemento.
3Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el array completo).
4Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier objeto como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el objeto completo).
*/



